# name: Exploring Variables and Secrets
# run-name: Exploring Variables and Secrets run
# on: push

# jobs:
#   docker_job_1:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Docker Build
#         run: echo docker build -t docker.io/dockerUsername/imageName:latest

#       - name: Docker Login
#         run: echo docker login --username=dockerUsername --password=dockerPassword

#       - name: Docker Publish
#         run: echo docker push docker.io/dockerUsername/imageName:latest

#   deploy_job_2:
#     needs: docker_job_1
#     runs-on: ubuntu-latest
#     steps:
#       - name: Docker Run
#         run: echo docker run -d -p 8080:80 docker.io/dockerUsername/imageName:latest

#################### environment variables at STEP level ####################
# name: Exploring Variables and Secrets
# run-name: Exploring Variables and Secrets run
# on: push

# jobs:
#   docker_job_1:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Docker Build
#         env:
#             CONTAINER_RESGISTRY: docker.io
#             DOCKER_USERNAME: lolawin
#             IMAGE_NAME: github-actions-nginx
#         run: echo docker build -t $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

#       - name: Docker Login
#         env:
#             DOCKER_PASSWORD: s3cUrePaSsw0rd
#             DOCKER_USERNME: lolawin
#         run: echo docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD

#       - name: Docker Publish
#         env:
#             CONTAINER_RESGISTRY: docker.io
#             DOCKER_USERNAME: lolawin
#             IMAGE_NAME: github-actions-nginx
#         run: echo docker push $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

#   deploy_job_2:
#     needs: docker_job_1
#     runs-on: ubuntu-latest
#     steps:
#       - name: Docker Run
#         env:
#             CONTAINER_RESGISTRY: docker.io
#             DOCKER_USERNAME: lolawin
#             IMAGE_NAME: github-actions-nginx
#         run: echo docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

#################### environment variables at JOB level ####################
# name: Exploring Variables and Secrets
# run-name: Exploring Variables and Secrets run
# on: push

# jobs:
#   docker_job_1:
#     env:
#         CONTAINER_RESGISTRY: docker.io
#         DOCKER_USERNAME: lolawin
#         IMAGE_NAME: github-actions-nginx
#     runs-on: ubuntu-latest
#     steps:
#       - name: Docker Build
#         run: echo docker build -t $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

#       - name: Docker Login
#         env:
#             DOCKER_PASSWORD: s3cUrePaSsw0rd
#         run: echo docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD

#       - name: Docker Publish
#         run: echo docker push $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

#   deploy_job_2:
#     env:
#         CONTAINER_RESGISTRY: docker.io
#         DOCKER_USERNAME: lolawin
#         IMAGE_NAME: github-actions-nginx
#     needs: docker_job_1
#     runs-on: ubuntu-latest
#     steps:
#       - name: Docker Run
#         run: echo docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

#################### environment variables at WORKFLOW level ####################
name: Exploring Variables and Secrets
run-name: Exploring Variables and Secrets run
on:
  workflow_dispatch:
#   schedule:
#     - cron: '*/1 * * * *'
#   push

env:
  CONTAINER_RESGISTRY: docker.io
  DOCKER_USERNAME: lolawin
  IMAGE_NAME: github-actions-nginx
  DOCKER_PASSWORD: s3cUrePaSsw0rd
jobs:
  docker_job_1:
    runs-on: ubuntu-latest
    steps:
      - name: Docker Build
        run: echo echo docker build -t $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

      - name: Docker Login
        run: echo docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD

      - name: Docker Publish
        run: echo docker push $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

  deploy_job_2:
    needs: docker_job_1
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-job
      cancel-in-progress: false
    timeout-minutes: 2
    steps:
      - name: Docker Run
        run: echo docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest
